---
- name: KVM hosts
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Installe les pré-requis python pour k8s
      pip:
        executable: /usr/bin/pip3
        name:
          - openshift>=0.6
          - PyYAML>=3.11
          - jmespath

- name: Configure all hosts
  hosts: all
  tasks:
    - name: Configure yum to trust all repositories
      lineinfile:
        line: sslverify=false
        path: /etc/yum.conf
        regexp: '^sslverify=.*'

- name: Prepare k8s hosts
  hosts: kubernetes
  gather_facts: true
  tasks:
    - name: Dépose la configuration yum
      copy:
        content: |
          [base]
          name=CentOS-$releasever - Base
          baseurl=https://repository.pole-emploi.intra/artifactory/rpm-base-centos-proxy/$releasever/os/$basearch/
          gpgcheck=0

          [updates]
          name=CentOS-$releasever - Updates
          baseurl=https://repository.pole-emploi.intra/artifactory/rpm-base-centos-proxy/$releasever/updates/$basearch/
          gpgcheck=0

          [extras]
          name=CentOS-$releasever - Extras
          baseurl=https://repository.pole-emploi.intra/artifactory/rpm-base-centos-proxy/$releasever/extras/$basearch/
          gpgcheck=0
        dest: /etc/yum.repos.d/CentOS-Base.repo
        mode: 0755


    - name: Crée le répertoire de configuration docker
      file:
        state: directory
        path: /etc/docker
        mode: 0755

    - name: Configure docker
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
              "insecure-registries" : ["docker-dev-virtual.repository.pole-emploi.intra", "docker-quay-proxy.repository.pole-emploi.intra", "docker-k8s-gcr-proxy.repository.pole-emploi.intra"],
              "registry-mirrors": ["https://docker-dev-virtual.repository.pole-emploi.intra"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2",
            "storage-opts": [
              "overlay2.override_kernel_check=true"
            ]
          }
        dest: /etc/docker/daemon.json
        mode: 0755

    - name: Configure le repo yum
      copy:
        content: |
          [docker-ce-stable]
          name=Docker CE Stable - $basearch
          baseurl=https://repository.pole-emploi.intra/artifactory/rpm-docker-centos-proxy/$releasever/$basearch/stable
          enabled=1
          gpgcheck=0
        dest: /etc/yum.repos.d/docker.repo
        mode: 0755

    - name: "Install docker"
      yum:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io

    - name: "Disable swap"
      command: swapoff -a -v
      register: swapoff
      changed_when: swapoff.stdout_lines|length > 0

    - name: Disable SWAP in fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)$'
        replace: '# \1'

- name: Prepare haProxy nodes
  hosts: loadbalancer
  gather_facts: true
  tasks:
    - name: Put SELinux in permissive mode, logging actions that would be blocked.
      selinux:
        policy: targeted
        state: permissive

    - name: Disable firewalld
      systemd:
        name: firewalld
        enabled: no
        state: stopped

    - name: Flush existing iptables rules
      iptables:
        flush: yes

    - name: List load balanced items
      set_fact:
        apiServers: "{{ apiServers | default([]) + [{'name': item, 'address': item + ':6443'}] }}"
      with_items: "{{ groups['kubernetes_masters'] }}"

    - name: "Print apiServers loadbalanced"
      debug: var=apiServers

    - name: Ensure HAProxy is installed.
      package: name=haproxy state=present

    - name: Copy HAProxy configuration in place.
      copy:
        content: |
          global
            log /dev/log  local0
            log /dev/log  local1 notice
            user haproxy
            group haproxy
            daemon

          defaults
            log global
            mode  http
            option  httplog
            option  dontlognull
            timeout connect 5000
            timeout client 50000
            timeout server 50000

          frontend apiServer
              bind 0.0.0.0:6443
                mode tcp
              option tcplog
              default_backend apiServerBackend

          backend apiServerBackend
              mode tcp
              option tcplog
              option tcp-check
              balance roundrobin
              default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
              {% for backend in apiServers %}
              server {{ backend.name }} {{ backend.address }} check
              {% endfor %}
        dest: /etc/haproxy/haproxy.cfg
        mode: 0644

    - name: Ensure HAProxy is started and enabled on boot.
      service: name=haproxy state=restarted enabled=yes
