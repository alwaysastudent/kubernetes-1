---
- name: Pré-requis
  include_tasks: pre-requis.yml

- name: Définis l'api_endpoint
  set_fact:
    api_endpoint_tmp: "{{ kubernetes_control_plane_endpoint | default(ansible_fqdn)}}"
  delegate_to: "{{groups['kubernetes_masters'][0]}}"
  run_once: yes

- name: Mets a disposition l'api_endpoint'
  set_fact:
    api_endpoint: "{{ api_endpoint_tmp }}"
  delegate_to: "{{ item }}"
  with_items: "{{ play_hosts }}"
  run_once: yes

- name: Promets la présence du répertoire de configuration kubeadm
  file:
    state: directory
    path: /etc/kubeadm
    mode: 0755

- name: Dépose la configuration d'initialisation kubeadm
  template:
    src: kubeadm_config.yaml
    dest: /etc/kubeadm/config.yaml
  run_once: true
  when: "inventory_hostname == groups['kubernetes_masters'][0]"

- name: Installe le master
  include_tasks: init_master.yml
  when: 'inventory_hostname == groups["kubernetes_masters"][0]'

- name: Installe le cni
  include_tasks: cni.yml

- name: Récupère les nodes
  include_tasks: get_nodes.yml
  run_once: yes

- name: Join les nodes supplémentaires
  include_tasks: join_node.yml
  when: 'inventory_hostname != groups["kubernetes_masters"][0] and node_name|default(ansible_nodename) not in nodes'

- name: Récupère les nodes
  include_tasks: get_nodes.yml
  run_once: yes

- name: Activation du service kubelet au boot
  systemd:
    name: kubelet
    enabled: yes

- name: Attends le status OK des nodes
  shell: 'kubectl get nodes | grep "{{item}}  *Ready "'
  register: result
  until: 'result.stdout != ""'
  retries: 10
  delay: 30
  changed_when: false
  with_items: "{{ nodes }}"
  delegate_to: "{{groups['kubernetes_masters'][0]}}"
  run_once: yes
